/*
 * Copyright (c) [2020] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan PSL v1.
 * You can use this software according to the terms and conditions of the Mulan PSL v1.
 * You may obtain a copy of Mulan PSL v1 at:
 *
 *     http://license.coscl.org.cn/MulanPSL
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v1 for more details.
 */

//SEED=189333068

//import java.util.zip.CRC32;

class cl_110 
{
	   long [][][] var_81 = {{{(3988525376025794243L),(-2160193992002041829L),(4752361816372011982L),(-1227521046318077240L),(-3735097075897154721L),(901754842588991297L)},{(4564898282710507590L),(-7864586852142175814L),(4796243669042444695L),(-4291590382081565606L),(-3204448864407643842L),(3573367987536346584L)},{(5574240896664886692L),(-1684733787390438425L),(-5596235915937279742L),(-8128662532317405867L),(-7645246632866678281L),(7997579495874544163L)},{(-5142402972520795096L),(7022876950027708920L),(6812092262136861298L),(-8217966976334989237L),(7157153259600143991L),(4258334747062715205L)},{(529139901076304707L),(1348089273792915119L),(-3122917150238508162L),(9075519688988550242L),(5139965031134297578L),(-974956891590850859L)},{(-7581822581476486625L),(8928662568298914323L),(2806455465333008183L),(-1454798323263806875L),(189011922595232802L),(-5969494293522182981L)},{(4285240719575183428L),(-8037546046551124456L),(2138858135805177196L),(2898187129077444650L),(6393213399631550326L),(-2770002865234190424L)}},{{(6248641774379675339L),(8079392863189233131L),(-1954178995038948537L),(8422061308720382688L),(7084858156757826052L),(-2572758946824956648L)},{(-176181371517619805L),(6669569854482606262L),(3689561813569453320L),(-504411427916923662L),(-142625640694506399L),(8333815733648434885L)},{(2209149302666094666L),(8000380905474727618L),(-261537815901506362L),(1791036770652958207L),(-2308040825206625163L),(528629231533326528L)},{(-5300970921115963157L),(-6193773709399418380L),(2722799837248124700L),(1047720675725911047L),(-5999047172045922481L),(-5716467048598779038L)},{(196788078592793425L),(-6599488824703204483L),(-2285283835678004669L),(6530466068103601870L),(716388289882123374L),(-7063191311613617896L)},{(4676903161383643290L),(-4176354957916230501L),(-2095257724361652950L),(323385956391175625L),(-7093883014506665062L),(-6699928224170533904L)},{(-4644295230010620345L),(3409222172927281125L),(3810031463953915151L),(453998585598664737L),(3568641177299443325L),(549906490287248400L)}},{{(-7171053009733713043L),(8164451041832089811L),(-6111359666923416643L),(-5403344318775125913L),(785616651036597854L),(-3269039638800753704L)},{(1496865131753073665L),(2432639567765421812L),(-3733626593468673963L),(-4099157261620590988L),(1253824728090742499L),(-7506207723432978860L)},{(1655836135739014091L),(4249754098631216655L),(-8860802673617602902L),(3260449834928345891L),(4097091537766962445L),(906885869902177061L)},{(5993257939070991708L),(2643057753749754719L),(8377607167178230377L),(3474419815936890518L),(-2807705369216054457L),(1095859086300511456L)},{(4750325875029118935L),(1618257522620674146L),(-297447318843995210L),(-7499408556300962258L),(5787424579699384153L),(3235418281512240029L)},{(-3486925625097705909L),(7729420437202419309L),(6668819967848916362L),(-680286432571195289L),(91958498701996070L),(-227098737226319345L)},{(4947381040147298287L),(-2536695525297643485L),(-6902628018116251591L),(-8701348525183254883L),(8971775105371885779L),(-4209310956473859808L)}},{{(7469861186963949986L),(3731370369713428155L),(7086967268596884808L),(-5498994113837379637L),(-7796979863600454111L),(-1264992890264755703L)},{(1144561658728057302L),(-5670599922639303761L),(-978359949026347776L),(-6536953119963902436L),(-5623671726287372261L),(7749326892768624641L)},{(910760137561128633L),(6310421049353694576L),(855896772808874745L),(-2189092279580480430L),(-736142116142055840L),(-6317277970621155382L)},{(4047782873653099825L),(-3566432891120539124L),(-3523545838457268877L),(-1796665995787212398L),(-700503223716388531L),(3727852455449743940L)},{(-975394824193692518L),(-3315787514767676584L),(8060133671041460965L),(-608160491338962859L),(5623532413273620456L),(-723583955758521539L)},{(7623231889407353249L),(-9149187341512297662L),(-4628995267250837786L),(4316210071533494661L),(4776116703580954041L),(2684952773022593014L)},{(-5545749454001104858L),(8203704918534695224L),(1588608398391029653L),(-8199488983210518208L),(7714499100163160751L),(6306543087983492156L)}}};
	   double var_84 = (-1.07772e-282D);
	   byte var_177 = (byte)(80);
	   int var_192 = (2082362380);
	   short var_224 = (short)(12725);
	   boolean var_225 = false;
	final   boolean [] var_230 = {true};
	   double [][][] var_298 = {{{(-8.30007e+177D),(1.11159e-230D),(1.64166e+25D),(-4.61268e+294D),(4.50499e-142D),(-8.00122e+185D)},{(1.79647e+121D),(-4.07921e-67D),(-4.2613e-235D),(-4.26328e+62D),(-1.09798e+90D),(-4.04141e+47D)},{(4.71783e-255D),(-1.1402e-119D),(-1.10236e+89D),(5.44905e-72D),(3.94321e-93D),(3.69235e+212D)},{(-2.74252e+197D),(-7.46692e+271D),(3.73914e+106D),(-4.94002e+146D),(-2.15415e+130D),(6.89942e+62D)}},{{(1.37975e+07D),(-1.70487e+89D),(1.7751e+224D),(-4.23963e+245D),(-2.88217e+282D),(1.53202e+187D)},{(4.50137e+71D),(3.06368e+194D),(-2.28952e-210D),(1.85484e+186D),(7.06664e-241D),(-1.43411e-13D)},{(-7.37342e-125D),(9.68133e-185D),(-5.10707e-08D),(5.24401e+290D),(1.41202e-279D),(-9.32802e+84D)},{(2.6678e-101D),(3.10361e-89D),(1.12912e-306D),(2.18915e-220D),(1.54735e+192D),(-7.40214e-09D)}}};
/*********************************/

	public  long GetChecksum()
	{
		System.out.printf("---Begin GetChecksum:%s\tLine=%d\n",Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getLineNumber());
		CrcBuffer b = new CrcBuffer(1745);
		for(int a0=0;a0<4;++a0){
		for(int a1=0;a1<7;++a1){
		for(int a2=0;a2<6;++a2){
			CrcCheck.ToByteArray(this.var_81[a0][a1][a2],b,"var_81" + "["+ Integer.toString(a0)+"]" + "["+ Integer.toString(a1)+"]" + "["+ Integer.toString(a2)+"]");
		}
		}
		}
		CrcCheck.ToByteArray(this.var_84,b,"var_84");
		CrcCheck.ToByteArray(this.var_177,b,"var_177");
		CrcCheck.ToByteArray(this.var_192,b,"var_192");
		CrcCheck.ToByteArray(this.var_224,b,"var_224");
		CrcCheck.ToByteArray(this.var_225,b,"var_225");
		for(int a0=0;a0<1;++a0){
			CrcCheck.ToByteArray(this.var_230[a0],b,"var_230" + "["+ Integer.toString(a0)+"]");
		}
		for(int a0=0;a0<2;++a0){
		for(int a1=0;a1<4;++a1){
		for(int a2=0;a2<6;++a2){
			CrcCheck.ToByteArray(this.var_298[a0][a1][a2],b,"var_298" + "["+ Integer.toString(a0)+"]" + "["+ Integer.toString(a1)+"]" + "["+ Integer.toString(a2)+"]");
		}
		}
		}
		CRC32 c = new CRC32();
		c.update(b.buffer,0,b.i);
		System.out.printf("---End GetChecksum:%s\tLine=%d\n",Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getLineNumber());
		return c.getValue();
	}
}
