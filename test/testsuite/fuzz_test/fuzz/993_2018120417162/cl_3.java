/*
 * Copyright (c) [2020] Huawei Technologies Co.,Ltd.All rights reserved.
 *
 * OpenArkCompiler is licensed under the Mulan PSL v1.
 * You can use this software according to the terms and conditions of the Mulan PSL v1.
 * You may obtain a copy of Mulan PSL v1 at:
 *
 *     http://license.coscl.org.cn/MulanPSL
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR
 * FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v1 for more details.
 */

//SEED=4271641260

//import java.util.zip.CRC32;

class cl_3 
{
	   int var_29 = (932844800);
	   long var_54 = (2528198330848904856L);
	   byte var_60 = (byte)(-76);
	   short var_75 = (short)(-1433);
	   double var_104 = (-4.25585e+107D);
	   boolean [] var_117 = {false,false,true,false,false};
	   long [] var_123 = {(-172607173933463047L),(-1117765691714560667L),(-3536531318049732506L),(6396415858351074971L),(4227171710416466520L),(7495885822135838424L),(-7349183601020453635L)};
	   float var_137 = (-5.41625e+20F);
	   long [][][] var_142 = {{{(6263883262083098154L),(6177945045960404444L),(7692106657618493256L),(-3700241064210179801L)},{(3103499351890403472L),(6511384032682137338L),(7878665505729946971L),(-5676652580242889305L)},{(-8445849833795183044L),(-6935990723680701818L),(5676734841946500858L),(-5927017247173808390L)},{(8163471751170649760L),(5211610572313866451L),(-3059269723789475568L),(6240878391552364402L)},{(6791904863487172402L),(-4597531627627418489L),(8046038848880231420L),(334620628672944547L)},{(5081720820619234040L),(4185417348458543102L),(2193606315619154722L),(-9040381733571578652L)}},{{(-4931241552672915728L),(5731496546544780449L),(-5915130392987165976L),(4984172949948301696L)},{(-4265943417702185572L),(7615351951389994109L),(6767709241891068530L),(-4961600450373401653L)},{(6574799973058813191L),(-1184253585828374582L),(-5721213044777787837L),(-6044538292995679314L)},{(3125584195498460341L),(-6100281382811187564L),(-1931420213543362542L),(6048005933551903409L)},{(-8034582339219244057L),(-1523422316047422097L),(-4555745222462698838L),(-7245834880724404127L)},{(1849025129814106982L),(-9094846022296430671L),(-3033470481651336389L),(6038501093674006684L)}}};
	   int [][] var_215 = {{(463530095),(-1744136655),(-1604814540),(-2069785949),(1967974065),(1334420430),(-1069725225)}};
	   boolean var_281 = true;
	   double [][][] var_319 = {{{(-2.89572e-173D),(-4.26753e-56D),(-3.42092e-186D),(-3.01313e+212D),(-1.20233e+54D),(1.18393e-114D)},{(1.10613e+288D),(-1.30529e-23D),(5.2502e-256D),(-1.42143e+254D),(2.08504e-113D),(-7.61108e+307D)},{(-1.05058e-37D),(1.18489e+54D),(2.02167e-38D),(3.10869e-30D),(2.13376e-127D),(1.14227e+31D)},{(6.94265e-85D),(4.85969e+190D),(-4.49095e-117D),(3.86966e-256D),(1.65852e+277D),(1.26393e+300D)},{(5.54034e+200D),(1.91039e+199D),(9.09053e+240D),(5.6963e+114D),(5.33805e+256D),(-2.82654e+169D)},{(2.08215D),(-1.89192e+264D),(-1.57197e-172D),(-8.00164e+133D),(-1.15387e-235D),(1.53001e-31D)},{(2.31054e-66D),(4.65016e-263D),(-6.16729e+62D),(-1.31976e-270D),(7.66531e-47D),(-1.30402e-45D)}},{{(-1.4848e+35D),(6.54882e-181D),(6.90941e-182D),(2.26937e+271D),(-2.72172e+293D),(-1.64757e+209D)},{(1.8807e+273D),(4.63068e+208D),(-2.41418e+53D),(3.87593e-283D),(-8.42408e-85D),(6.56368e+271D)},{(8.92828e+95D),(7.2681e+213D),(-4.75671e+83D),(1.04924e-270D),(-1.41584e-300D),(-1.97509e+180D)},{(-1.96212e-281D),(1.48157e+238D),(-1.90296e-68D),(9.75024e-282D),(6.32475e-197D),(8.2191e-238D)},{(-5.30772e+76D),(1.19715e-203D),(1.89433e-282D),(-6.92571e+228D),(1.76869e-245D),(-1.04823e-47D)},{(-1.14202e-163D),(-1.03353e+194D),(7.76312e-131D),(1.11227e+295D),(-7.19264e+161D),(-2.33045e-34D)},{(-6.84593e+95D),(-1.91067e-38D),(-3.80078e-185D),(-3.13086e-195D),(1.81719e+107D),(-9.71085e+116D)}},{{(2.02166e-59D),(4.13344e+58D),(-2.8628e-288D),(-1.32136e-134D),(-3.5316e-282D),(9.13824e-248D)},{(-2.8012e-226D),(-5.70697e+203D),(-3.14801e+269D),(1.24577e+71D),(1.24766e+183D),(-2.09047e+90D)},{(1.34032e-191D),(-2.74834e+281D),(-6.06655e+128D),(-2.50557e+238D),(1.07222e-247D),(3.585e-298D)},{(1.77757e+68D),(-3.84486e-168D),(-1.06614e-48D),(-6.92371e-255D),(-8.71199e+267D),(-4.07711e+198D)},{(-3.4256e-252D),(-3.17574e-39D),(4.41871e+249D),(1.16677e+222D),(1.44689e+306D),(8.76253e+243D)},{(-4.39372e+224D),(-1.94453e+261D),(-1.6786e+257D),(-2.40629e-113D),(-1.30798e+159D),(2.01562e+41D)},{(-4.48625e+83D),(8.34823e-301D),(1.44152e-75D),(2.17365e-159D),(-3.26304e+158D),(-1.28849e+73D)}},{{(-1.25076e-37D),(-5.1327e+238D),(1.97191e+233D),(-2.90175e+75D),(-2.04747e+108D),(5.30986e-119D)},{(-1.10375e-78D),(6.61142e+135D),(5.52237e+291D),(-8.94498e+254D),(-2.66727e-74D),(4.10113e+177D)},{(-2.91228e+114D),(-2.25477e+78D),(-8.14774e-48D),(-2.96562e+26D),(5.60728e-242D),(2.78209e-122D)},{(-1.88094e-143D),(1.26194e-281D),(-5.33273e-230D),(-6.16119e-286D),(1.01878e-110D),(1.63741e+306D)},{(5.95608e-227D),(-2.14968e+263D),(-1.8436e-69D),(-3.36478e-41D),(-2.67405e-220D),(-1.06314e-16D)},{(-1.70412e+276D),(1.01672e-14D),(-2.61621e-123D),(1.44423e+43D),(7.6438e+240D),(1.17409e+235D)},{(3.95178e+46D),(3.81784e+37D),(-5.3613e+221D),(-1.43334e-108D),(-2.30865e+129D),(3.74349e-53D)}},{{(1.09158e+21D),(-5.98263e-105D),(-5.49726e+170D),(-6.7529e-200D),(-6.29528e+168D),(2.11891e-221D)},{(2.9261e-38D),(-7.60985e+223D),(2.19594e+66D),(-9.49149e+294D),(-4.98926e+58D),(3.03878e-261D)},{(-3.00428e-137D),(2.55467e-277D),(4.18006e+81D),(-5.10702e+160D),(-4.78941e-58D),(6.76792e-166D)},{(-1.49646e+204D),(-5.61656e+95D),(2.89569e+200D),(1.28161e+244D),(-5.38052e+152D),(-7.20512e-85D)},{(6.8105e-86D),(-2.76115e-228D),(-3.72919e-14D),(-9.76828e-70D),(8.70673e+242D),(3.72721e-264D)},{(1.02324e+283D),(-9.78072e-248D),(-4.57617e+210D),(6.10047e+106D),(-7.32246e+25D),(-4.5475e+234D)},{(2.62181e+85D),(3.7123e-219D),(-3.25784e-106D),(9.85075e-270D),(1.64019e-166D),(-5.22291e-51D)}},{{(-2.37376e-138D),(-1.25718e-138D),(-5.40549e+285D),(6.49922e+109D),(-3.21465e-256D),(1.70559e-240D)},{(-4.58874e+291D),(-3.95063e+250D),(4.99703e+305D),(-3.04576e+304D),(1.02561e-89D),(-8.95641e+210D)},{(-2.8006e-295D),(2.35434e+64D),(2.46653e-241D),(1.34404e-42D),(-1.94278e+298D),(-6.07702e-255D)},{(-0.0278007D),(9.7783e+55D),(5.04171e-295D),(-5.18803e-204D),(-4.29005e-163D),(-1.19625e+244D)},{(-1.76463e+148D),(3.34113e+37D),(-8.18314e-263D),(8.32176e-98D),(5.07652e-11D),(-6.22816e-130D)},{(-1.019e-228D),(5.99757e-12D),(-5.16499e+279D),(4.21066e-18D),(2.09078e-106D),(4.83293e+42D)},{(1.32776e-241D),(-1.07362e+26D),(9.88237e+143D),(-1.60633e-91D),(-2.61909e-264D),(6.14629e+170D)}}};
	   boolean [][][] var_333 = {{{false,false,true,false},{false,false,false,true},{false,false,true,true},{true,true,true,true},{true,false,true,false},{false,false,true,false}},{{false,true,false,false},{false,false,false,false},{false,true,true,false},{false,false,true,true},{false,false,false,true},{true,true,true,false}}};
/*********************************/

	public  long GetChecksum()
	{
		System.out.printf("---Begin GetChecksum:%s\tLine=%d\n",Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getLineNumber());
		CrcBuffer b = new CrcBuffer(2565);
		CrcCheck.ToByteArray(this.var_29,b,"var_29");
		CrcCheck.ToByteArray(this.var_54,b,"var_54");
		CrcCheck.ToByteArray(this.var_60,b,"var_60");
		CrcCheck.ToByteArray(this.var_75,b,"var_75");
		CrcCheck.ToByteArray(this.var_104,b,"var_104");
		for(int a0=0;a0<5;++a0){
			CrcCheck.ToByteArray(this.var_117[a0],b,"var_117" + "["+ Integer.toString(a0)+"]");
		}
		for(int a0=0;a0<7;++a0){
			CrcCheck.ToByteArray(this.var_123[a0],b,"var_123" + "["+ Integer.toString(a0)+"]");
		}
		CrcCheck.ToByteArray(this.var_137,b,"var_137");
		for(int a0=0;a0<2;++a0){
		for(int a1=0;a1<6;++a1){
		for(int a2=0;a2<4;++a2){
			CrcCheck.ToByteArray(this.var_142[a0][a1][a2],b,"var_142" + "["+ Integer.toString(a0)+"]" + "["+ Integer.toString(a1)+"]" + "["+ Integer.toString(a2)+"]");
		}
		}
		}
		for(int a0=0;a0<1;++a0){
		for(int a1=0;a1<7;++a1){
			CrcCheck.ToByteArray(this.var_215[a0][a1],b,"var_215" + "["+ Integer.toString(a0)+"]" + "["+ Integer.toString(a1)+"]");
		}
		}
		CrcCheck.ToByteArray(this.var_281,b,"var_281");
		for(int a0=0;a0<6;++a0){
		for(int a1=0;a1<7;++a1){
		for(int a2=0;a2<6;++a2){
			CrcCheck.ToByteArray(this.var_319[a0][a1][a2],b,"var_319" + "["+ Integer.toString(a0)+"]" + "["+ Integer.toString(a1)+"]" + "["+ Integer.toString(a2)+"]");
		}
		}
		}
		for(int a0=0;a0<2;++a0){
		for(int a1=0;a1<6;++a1){
		for(int a2=0;a2<4;++a2){
			CrcCheck.ToByteArray(this.var_333[a0][a1][a2],b,"var_333" + "["+ Integer.toString(a0)+"]" + "["+ Integer.toString(a1)+"]" + "["+ Integer.toString(a2)+"]");
		}
		}
		}
		CRC32 c = new CRC32();
		c.update(b.buffer,0,b.i);
		System.out.printf("---End GetChecksum:%s\tLine=%d\n",Thread.currentThread().getStackTrace()[1].getClassName(),Thread.currentThread().getStackTrace()[1].getLineNumber());
		return c.getValue();
	}
}
